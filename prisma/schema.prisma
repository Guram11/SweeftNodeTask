// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String             @id @default(uuid())
  name                  String
  email                 String             @unique
  password              String
  passwordConfirm       String
  country               String
  industry              String
  role                  Role               @default(admin)
  subscription          Subscription_plan? @default(free)
  employees             Employee[]
  verified              Boolean?           @default(false)
  registeredAt          DateTime?          @default(now())
  subscriptionChangedAt DateTime?
  passwordChangedAt     DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  File                  File[]
  consumers             Consumer[]
}

model Employee {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  passwordConfirm   String
  verified          Boolean?  @default(false)
  role              Role?     @default(user)
  company           Company   @relation(fields: [companyId], references: [id])
  companyId         String
  File              File[]
  passwordChangedAt DateTime?
}

model File {
  id          String   @id @default(uuid())
  name        String
  employee    Employee @relation(fields: [employeeId], references: [id])
  path        String
  employeeId  String
  availableTo String[] @default([])
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
}

model Consumer {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Token {
  id    String @id @default(uuid())
  token String @unique
}

enum Subscription_plan {
  free
  basic
  premium
}

enum Role {
  admin
  user
}
